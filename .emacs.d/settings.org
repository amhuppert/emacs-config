* Init
#+BEGIN_SRC emacs-lisp
    (require 'flycheck)
    (setq inhibit-startup-screen t)

  ;;This function will re-read the dir-locals file and set the new values for the current buffer:
  (defun my-reload-dir-locals-for-current-buffer ()
    "reload dir locals for the current buffer"
    (interactive)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))

    (setq-default indent-tabs-mode nil)
    (setq tab-width 4)

    (global-set-key (kbd "M-J") (lambda () 
      (interactive)
      (let ((current-prefix-arg 1))
        (call-interactively #'join-line))))

    (add-hook 'prog-mode-hook 'linum-mode)

    ;; Added because these files were causing create-react-app dev server to crash.
    (setq create-lockfiles nil)

    (defun my/yas-expand-haskell-module ()
      (interactive)
      (yas-expand-snippet (yas-lookup-snippet "new-module" 'haskell-mode)))

    (use-package autoinsert
      :config
      (setq auto-insert-query nil)
      (auto-insert-mode 1)
      (add-hook 'find-file-hook 'auto-insert)
      (setq auto-insert-alist nil)
      (add-to-list 'auto-insert-alist '(".+\.hs$" . [my/yas-expand-haskell-module])))

  (global-set-key (kbd "C-; d") 'kill-whole-line)

  (defun vicarie/eval-last-sexp-and-do (f)
    "Eval the last sexp and call F on its value."
    (let ((standard-output (current-buffer))
          (value (eval-last-sexp nil)))
      (funcall f value)))

  (defun vicarie/eval-replace-last-sexp ()
    "Evaluate and replace last sexp with its value."
    (interactive)
    (vicarie/eval-last-sexp-and-do (lambda (value)
                                     (backward-kill-sexp)
                                     (insert (format "%s" value)))))

  (global-set-key (kbd "C-c =") 'vicarie/eval-replace-last-sexp)

  (global-set-key (kbd "C-; i") 'imenu)
#+END_SRC
* Style & Theme
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 260)
;; use variable-pitch fonts for some headings and titles
(setq zenburn-use-variable-pitch t)

;; scale headings in org-mode
(setq zenburn-scale-org-headlines t)

;; scale headings in outline-mode
(setq zenburn-scale-outline-headlines t)

;; Theme
(load-theme 'zenburn t)
#+END_SRC
* Navigation
** ace-window
#+BEGIN_SRC emacs-lisp
  ;; Easily switch between windows
  (global-set-key (kbd "M-o") 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_SRC
** avy
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-g c") 'avy-goto-char)
   (global-set-key (kbd "M-g g") 'avy-goto-line)
   (global-set-key (kbd "M-g w") 'avy-goto-word-1)
   (global-set-key (kbd "M-g k") 'avy-kill-whole-line)
   (global-set-key (kbd "M-g l") 'avy-copy-line)
 #+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  ;; 
  (ivy-mode 1)
  (setq ivy-count-format "(%d/%d) ")

  (global-set-key (kbd "C-s") 'swiper-isearch)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)

  (global-set-key (kbd "C-c c") 'counsel-compile)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c L") 'counsel-git-log)
  (global-set-key (kbd "C-c m") 'counsel-linux-app)
  (global-set-key (kbd "C-x l") 'counsel-locate)

  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "C-c b") 'counsel-bookmark)
  (global-set-key (kbd "C-h b") 'counsel-descbinds)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c o") 'counsel-outline)
  (global-set-key (kbd "C-c t") 'counsel-load-theme)
  (global-set-key (kbd "C-c F") 'counsel-org-file)
#+END_SRC
** multiple-cursors
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-;") 'set-rectangular-region-anchor)

(require 'region-bindings-mode)
(region-bindings-mode-enable)
(define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
(define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
(define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)

#+END_SRC
* General Programming
** Flycheck
#+BEGIN_SRC emacs-lisp
  (define-key prog-mode-map (kbd "C-; e") 'flycheck-list-errors)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
(global-set-key (kbd "<f2> v") 'yas-visit-snippet-file)
(global-set-key (kbd "<f2> n") 'yas-new-snippet)
#+END_SRC
** Delimiters
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (lsp-treemacs-sync-mode 1)
  (define-key lsp-mode-map (kbd "C-. e") 'lsp-treemacs-errors-list)
  (define-key lsp-mode-map (kbd "C-. s") 'lsp-treemacs-symbols)
  (define-key lsp-mode-map (kbd "C-. a") 'lsp-ui-sideline-apply-code-actions)
  (define-key lsp-mode-map (kbd "C-; SPC") 'lsp-execute-code-action)
  (define-key flycheck-mode-map (kbd "C-; n") 'flycheck-next-error)
  (define-key flycheck-mode-map (kbd "C-; p") 'flycheck-previous-error)
#+end_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (require 'expand-region)
  (eval-after-load 'js2-mode '(require 'html-mode-expansions))
  (global-set-key (kbd "C-=") 'er/expand-region)
  (setq er--show-expansion-message t)
#+END_SRC
** SQL
#+BEGIN_SRC emacs-lisp
  (defun sql-format-region (beg end)
    "Beautify SQL in region between beg and END."
    (interactive "r")
    (save-excursion
      (shell-command-on-region beg end "pg_format" nil t)))

  (defun sql-format-buffer ()
   "Beautify SQL in buffer."
   (interactive)
   (sql-format-region (point-min) (point-max)))
#+END_SRC
* Packages
** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key (kbd "<C-tab>") 'company-complete)
  (setq company-search-filtering t)
#+END_SRC 
** magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch)
(global-set-key (kbd "C-c C-g") 'magit-file-dispatch)
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
  ;; Remember recent M-x history
  (smex-initialize)
#+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-0") 'treemacs-select-window)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  ;; Display key bindings following your currently entered incomplete command prefix
  (which-key-mode)
#+END_SRC
** whitespace-cleanup-mode
#+BEGIN_SRC emacs-lisp
  ;; Run `whitespace-cleanup` before saving buffer, but only if the buffer was initially clean.
  (global-whitespace-cleanup-mode)
#+END_SRC
* Languages
** Haskell
#+BEGIN_SRC emacs-lisp

  ;; Haskell LSP config
  (require 'lsp)
  (require 'lsp-haskell)
  (add-hook 'haskell-mode-hook #'lsp)
  (add-hook 'haskell-literate-mode-hook #'lsp)

  (defun haskell-stylish-on-save-fn ()
    "Enable running stylish-haskell on save"
    (setq haskell-stylish-on-save 1))

  (use-package ormolu
   :bind
   (:map haskell-mode-map
     ("C-; f" . ormolu-format-buffer)))

#+END_SRC
** Web Development
#+BEGIN_SRC emacs-lisp
  ;; Expand css selector into HTML tags
  (require 'zencoding-mode)
  (add-hook 'tide-mode-hook 'zencoding-mode)

  (defun repeat-string (n str)
    (let ((result ""))
      (dotimes (number n)
        (setq result (concat result str)))
      result))

  (defun prev-line-indentation ()
    (save-excursion
      (forward-line -1)
      (current-indentation)))

  (defun yas-set-local (varname value)
    (set (make-local-variable varname) value)
    "")


  (defun typescript-indent-simple ()
    "Indent to the first non-whitespace character on the previous line.
  If already at or beyond that point, indent by typescript-indent-level."
    (interactive)
    (let* ((prev-line-start-col (save-excursion
                                  (forward-line -1)
                                  (current-indentation))))
      (indent-to prev-line-start-col typescript-indent-level)))

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1)
    (define-key tide-mode-map (kbd "M-<tab>") 'typescript-indent-simple)
    (define-key tide-mode-map (kbd "C-; l") 'tide-references)
    (define-key tide-mode-map (kbd "C-; r") 'tide-rename-symbol)
    (define-key tide-mode-map (kbd "C-; R") 'tide-refactor))
  (setq js-indent-level 2)

  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook (typescript-mode . setup-tide-mode))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  ;; (add-hook 'before-save-hook 'tide-format-before-save)

  ;; Support for TSX files
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . typescript-mode))
#+END_SRC
*** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :after (typescript-mode))

  (eval-after-load 'typescript-mode
    '(progn
       (add-hook 'typescript-mode-hook #'add-node-modules-path)))

#+END_SRC
